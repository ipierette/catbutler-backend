-- üê± CatButler - SCRIPT COMPLETO PARA SUPABASE
-- Execute este SQL completo no Supabase Dashboard > SQL Editor

-- ============================================================================
-- 1. CRIAR TABELA DE PERFIS (se n√£o existir)
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT,
  name TEXT,
  avatar_url TEXT,
  bio TEXT,
  theme TEXT DEFAULT 'light',
  preferences JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Habilitar RLS na tabela profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para profiles (usu√°rios veem apenas seu pr√≥prio perfil)
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
CREATE POLICY "Users can view own profile" 
ON public.profiles FOR SELECT 
USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;
CREATE POLICY "Users can update own profile" 
ON public.profiles FOR UPDATE 
USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can insert own profile" ON public.profiles;
CREATE POLICY "Users can insert own profile" 
ON public.profiles FOR INSERT 
WITH CHECK (auth.uid() = id);

-- ============================================================================
-- 2. CRIAR TABELA DE TAREFAS
-- ============================================================================

-- Primeiro, dropar a tabela se existir para recriar corretamente
DROP TABLE IF EXISTS public.tasks CASCADE;

-- Criar tabela tasks corretamente
CREATE TABLE public.tasks (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  titulo TEXT NOT NULL,
  descricao TEXT,
  categoria TEXT NOT NULL DEFAULT 'Outros',
  prioridade TEXT NOT NULL DEFAULT 'M√©dia' CHECK (prioridade IN ('Baixa', 'M√©dia', 'Alta')),
  status TEXT NOT NULL DEFAULT 'Pendente' CHECK (status IN ('Pendente', 'Em Andamento', 'Conclu√≠da')),
  data_criacao TIMESTAMPTZ DEFAULT NOW(),
  data_vencimento DATE,
  data_conclusao TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Criar √≠ndices para performance AP√ìS a tabela estar criada
CREATE INDEX idx_tasks_user_id ON public.tasks(user_id);
CREATE INDEX idx_tasks_status ON public.tasks(status);
CREATE INDEX idx_tasks_categoria ON public.tasks(categoria);
CREATE INDEX idx_tasks_prioridade ON public.tasks(prioridade);
CREATE INDEX idx_tasks_data_vencimento ON public.tasks(data_vencimento);

-- Habilitar RLS (Row Level Security)
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

-- Criar pol√≠ticas de acesso - Usu√°rios podem ver apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can view own tasks" ON public.tasks;
CREATE POLICY "Users can view own tasks" 
ON public.tasks FOR SELECT 
USING (auth.uid() = user_id);

-- Usu√°rios podem inserir apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can insert own tasks" ON public.tasks;
CREATE POLICY "Users can insert own tasks" 
ON public.tasks FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Usu√°rios podem atualizar apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can update own tasks" ON public.tasks;
CREATE POLICY "Users can update own tasks" 
ON public.tasks FOR UPDATE 
USING (auth.uid() = user_id);

-- Usu√°rios podem deletar apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can delete own tasks" ON public.tasks;
CREATE POLICY "Users can delete own tasks" 
ON public.tasks FOR DELETE 
USING (auth.uid() = user_id);

-- ============================================================================
-- 3. CRIAR FUN√á√ÉO PARA ATUALIZAR TIMESTAMPS AUTOMATICAMENTE
-- ============================================================================

CREATE OR REPLACE FUNCTION handle_tasks_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  
  -- Se o status mudou para "Conclu√≠da", definir data_conclusao
  IF NEW.status = 'Conclu√≠da' AND OLD.status != 'Conclu√≠da' THEN
    NEW.data_conclusao = NOW();
  ELSIF NEW.status != 'Conclu√≠da' AND OLD.status = 'Conclu√≠da' THEN
    NEW.data_conclusao = NULL;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar trigger para updated_at e data_conclusao
DROP TRIGGER IF EXISTS tasks_updated_at ON public.tasks;
CREATE TRIGGER tasks_updated_at
  BEFORE UPDATE ON public.tasks
  FOR EACH ROW
  EXECUTE FUNCTION handle_tasks_updated_at();

-- ============================================================================
-- 4. CRIAR FUN√á√ÉO DE ESTAT√çSTICAS
-- ============================================================================

CREATE OR REPLACE FUNCTION get_tasks_stats(user_uuid UUID)
RETURNS TABLE (
  total_tasks BIGINT,
  pending_tasks BIGINT,
  in_progress_tasks BIGINT,
  completed_tasks BIGINT,
  overdue_tasks BIGINT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*) as total_tasks,
    COUNT(*) FILTER (WHERE status = 'Pendente') as pending_tasks,
    COUNT(*) FILTER (WHERE status = 'Em Andamento') as in_progress_tasks,
    COUNT(*) FILTER (WHERE status = 'Conclu√≠da') as completed_tasks,
    COUNT(*) FILTER (WHERE status != 'Conclu√≠da' AND data_vencimento < CURRENT_DATE) as overdue_tasks
  FROM public.tasks 
  WHERE user_id = user_uuid;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- 5. CRIAR FUN√á√ÉO DE LIMPEZA AUTOM√ÅTICA
-- ============================================================================

CREATE OR REPLACE FUNCTION cleanup_completed_tasks()
RETURNS INTEGER AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  -- Deletar tarefas conclu√≠das h√° mais de 24 horas
  DELETE FROM public.tasks 
  WHERE status = 'Conclu√≠da' 
    AND data_conclusao < NOW() - INTERVAL '24 hours';
  
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  
  -- Log da limpeza
  RAISE NOTICE 'CatButler: % tarefas antigas removidas em %', deleted_count, NOW();
  
  RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- 6. LIMPEZA AUTOM√ÅTICA (OPCIONAL - APENAS SE NECESS√ÅRIO)
-- ============================================================================

-- A fun√ß√£o cleanup_completed_tasks() j√° foi criada acima
-- Voc√™ pode executar manualmente quando quiser:
-- SELECT cleanup_completed_tasks();

-- ‚ö†Ô∏è CRON JOB √â OPCIONAL - Descomente apenas se quiser automa√ß√£o:
-- 
-- Para habilitar limpeza autom√°tica di√°ria (OPCIONAL):
-- CREATE EXTENSION IF NOT EXISTS pg_cron;
-- SELECT cron.schedule('catbutler-cleanup', '0 2 * * *', 'SELECT cleanup_completed_tasks();');
--
-- Para remover o cron job:
-- SELECT cron.unschedule('catbutler-cleanup');

-- ============================================================================
-- 7. VERIFICA√á√ïES FINAIS
-- ============================================================================

-- Verificar se as tabelas foram criadas
SELECT 'Tabelas criadas:' as status;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('profiles', 'tasks');

-- Verificar se as pol√≠ticas RLS est√£o ativas
SELECT 'Pol√≠ticas RLS ativas:' as status;
SELECT tablename, rowsecurity FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN ('profiles', 'tasks');

-- Testar fun√ß√£o de estat√≠sticas (deve funcionar mesmo sem tarefas)
SELECT 'Testando fun√ß√£o de estat√≠sticas:' as status;
-- SELECT * FROM get_tasks_stats(auth.uid());  -- Descomente para testar

-- ‚úÖ CONFIGURA√á√ÉO CONCLU√çDA!
SELECT 'üê± CatButler database setup completed successfully!' as final_status;

-- ============================================================================
-- COMANDOS √öTEIS PARA MANUTEN√á√ÉO:
-- ============================================================================

-- Executar limpeza manual:
-- SELECT cleanup_completed_tasks();

-- Ver estat√≠sticas de um usu√°rio:
-- SELECT * FROM get_tasks_stats('SEU_USER_ID_AQUI');

-- Remover cron job (se necess√°rio):
-- SELECT cron.unschedule('catbutler-cleanup-completed-tasks');

-- Ver logs do cron:
-- SELECT * FROM cron.job_run_details 
-- WHERE jobid IN (SELECT jobid FROM cron.job WHERE jobname = 'catbutler-cleanup-completed-tasks') 
-- ORDER BY start_time DESC;