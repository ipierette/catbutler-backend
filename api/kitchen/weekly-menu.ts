import type { VercelRequest, VercelResponse } from '@vercel/node';
import { withCors } from '../_lib/cors';
import Groq from 'groq-sdk';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { createClient } from '@supabase/supabase-js';

const groq = process.env.GROQ_API_KEY ? new Groq({ apiKey: process.env.GROQ_API_KEY }) : null;
const gemini = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);


// Gera um card√°pio semanal com caf√©, almo√ßo e jantar para cada dia, evitando repeti√ß√µes e ingredientes proibidos
async function gerarCardapioSemanalIA(ingredientesProibidos?: string[]): Promise<string> {
  if (!gemini && !groq) throw new Error('Nenhum modelo IA configurado');
  let restricao = '';
  if (ingredientesProibidos && ingredientesProibidos.length > 0) {
    restricao = `\n\n‚ö†Ô∏è RESTRI√á√ÉO ABSOLUTA: O usu√°rio N√ÉO gosta dos seguintes ingredientes e NUNCA pode aparecer nenhum prato, acompanhamento, molho, tempero ou refer√™ncia que contenha: ${ingredientesProibidos.join(', ')}.  
Se houver d√∫vida sobre a presen√ßa de algum ingrediente proibido, N√ÉO sugira o prato.  
Jamais repita pratos nem crie varia√ß√µes disfar√ßadas.  
Se algum item proibido for sugerido, ser√° considerado erro grave.`;
  }
    const prompt = `üçΩÔ∏è Atue como um chef brasileiro de alt√≠ssimo n√≠vel, com especializa√ß√£o em culin√°ria caseira, gastronomia regional e internacional.  
Sua miss√£o √© criar **um card√°pio semanal COMPLETO, EXCLUSIVO e CRIATIVO**, sempre 100% diferente a cada execu√ß√£o, contendo sugest√µes de caf√© da manh√£, almo√ßo e jantar para todos os dias da semana (segunda a domingo).  

üîë REGRAS ESSENCIAIS:  
1. **Zero repeti√ß√£o**: nunca repita nomes de pratos, receitas ou estruturas.  
2. **Variedade m√°xima**: use prote√≠nas diferentes (carne, frango, peixe, ovos, frutos do mar, vegetariano, vegano).  
3. **Inclus√£o obrigat√≥ria**: pelo menos um prato vegano na semana.  
4. **Mistura cultural**: inclua pratos t√≠picos brasileiros (de v√°rias regi√µes), internacionais, simples e pr√°ticos.  
5. **Criatividade realista**: crie pratos originais, mas f√°ceis de preparar, com ingredientes comuns e acess√≠veis (evite itens caros ou dif√≠ceis de encontrar).  
6. **Apresenta√ß√£o clara**: organize em tabela ou lista bem formatada, em portugu√™s do Brasil, destacando cada dia.  
7. **Estrutura flex√≠vel**: varie a ordem, estilo de apresenta√ß√£o e formas de listar os pratos a cada nova chamada.  
8. **N√£o repita ingredientes principais** ao longo da semana.  
9. **Respeite todas as restri√ß√µes alimentares** informadas. ${restricao}  
  10. **Nunca deixe nenhum dia da semana sem caf√©, almo√ßo e jantar preenchidos. Domingo deve ser sempre completo.**
  11. **Revise cuidadosamente a ortografia e gram√°tica antes de finalizar. Evite erros de portugu√™s, nomes inventados ou palavras sem sentido.**
  12. **Seja criativo, mas sempre com pratos reais, nomes corretos e descri√ß√µes claras.**

üìå EXEMPLO DE FORMATA√á√ÉO (apenas ilustrativo, n√£o repita exatamente):  

SEGUNDA:  
‚òï Caf√© da manh√£: ‚Ä¶  
üç≤ Almo√ßo: ‚Ä¶  
üåô Jantar: ‚Ä¶  

TER√áA:  
‚òï Caf√© da manh√£: ‚Ä¶  
üç≤ Almo√ßo: ‚Ä¶  
üåô Jantar: ‚Ä¶  

‚ö° Cada execu√ß√£o deste comando deve gerar um card√°pio **TOTALMENTE in√©dito**, com pratos e descri√ß√µes variadas, surpreendendo sempre o usu√°rio.  

Finalize com uma mensagem calorosa, simp√°tica e envolvente, convidando o usu√°rio a compartilhar seu card√°pio e divulgar o site **CatButler!** üêæ`;

  // Prompt √∫nico para Gemini: card√°pio completo
  const promptGemini = `üçΩÔ∏è Atue como um chef brasileiro de alt√≠ssimo n√≠vel, com especializa√ß√£o em culin√°ria caseira, gastronomia regional e internacional.\nSua miss√£o √© criar **um card√°pio semanal COMPLETO, EXCLUSIVO e CRIATIVO**, sempre 100% diferente a cada execu√ß√£o, contendo sugest√µes de caf√© da manh√£, almo√ßo e jantar para todos os dias da semana (segunda a domingo).\n\nüîë REGRAS ESSENCIAIS:\n1. Zero repeti√ß√£o de pratos ou estruturas.\n2. Variedade m√°xima de prote√≠nas.\n3. Pelo menos um prato vegano.\n4. Misture pratos brasileiros e internacionais.\n5. Pratos reais, ingredientes acess√≠veis.\n6. Apresente em portugu√™s do Brasil, bem formatado.\n7. N√£o repita ingredientes principais.\n8. Respeite todas as restri√ß√µes alimentares. ${restricao}\n9. N√£o deixe nenhum dia sem caf√©, almo√ßo e jantar. Domingo deve ser sempre completo.\n10. Revise ortografia e gram√°tica.\n11. Seja criativo, mas realista.\n\nExemplo:\nSEGUNDA:\n‚òï Caf√© da manh√£: ...\nüç≤ Almo√ßo: ...\nüåô Jantar: ...\n\nGere o card√°pio completo de segunda a domingo, com introdu√ß√£o e mensagem final simp√°tica convidando o usu√°rio a compartilhar o card√°pio e divulgar o site CatButler!`;

  let resultado = '';
  if (gemini) {
    try {
      const model = gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const result = await model.generateContent(promptGemini);
      resultado = result.response.text();
      if (!resultado || resultado.trim().length < 10) {
        resultado = 'N√£o foi poss√≠vel gerar o card√°pio completo com o Gemini gratuito.';
      }
    } catch (err: any) {
      resultado = 'Limite do Gemini gratuito atingido ou erro na gera√ß√£o do card√°pio.';
    }
  }
  // P√≥s-processamento: remove linhas com ingredientes proibidos (caso a IA ignore)
  if (ingredientesProibidos && ingredientesProibidos.length > 0) {
    const proibidosRegex = new RegExp(ingredientesProibidos.map(i => i.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|'), 'i');
    resultado = resultado.split('\n').filter(linha => !proibidosRegex.test(linha)).join('\n');
  }
  return resultado;
}


const handler = async (req: VercelRequest, res: VercelResponse): Promise<void> => {
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'M√©todo n√£o permitido' });
    return;
  }
  try {
    // Permite receber ingredientesProibidos no body (JSON)
    let ingredientesProibidos: string[] | undefined = undefined;
    if (req.body && typeof req.body === 'object') {
      if (Array.isArray(req.body.ingredientesProibidos)) {
        ingredientesProibidos = req.body.ingredientesProibidos.map((i: any) => String(i)).filter(Boolean);
      }
    }
    const cardapio = await gerarCardapioSemanalIA(ingredientesProibidos);
    res.status(200).json({ success: true, cardapio });
    return;
  } catch (error) {
    console.error('[WEEKLY MENU ERROR]', error);
    res.status(500).json({ success: false, error: (error instanceof Error ? error.message : String(error)) });
    return;
  }
};

export default withCors(handler);
