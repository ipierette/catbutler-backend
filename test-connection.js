#!/usr/bin/env node
/**
 * üê± TESTE DE CONEX√ÉO - CatButler Backend
 * Testa a conex√£o com Supabase e valida configura√ß√µes
 */

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config({ path: '.env.local' });

console.log('üê± CatButler - Teste de Conex√£o\n');

// 1Ô∏è‚É£ TESTE DE VARI√ÅVEIS DE AMBIENTE
console.log('1Ô∏è‚É£ Verificando vari√°veis de ambiente...');
const requiredVars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY'];
const missingVars = requiredVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
    console.error('‚ùå Vari√°veis faltando:', missingVars);
    process.exit(1);
}

console.log('‚úÖ Vari√°veis encontradas');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL}`);
console.log(`   SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY.substring(0, 50)}...`);
console.log('');

// 2Ô∏è‚É£ TESTE DE CONEX√ÉO COM SUPABASE
console.log('2Ô∏è‚É£ Testando conex√£o com Supabase...');

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
);

async function testConnection() {
    try {
        // Teste b√°sico de conectividade
        const { data, error } = await supabase
            .from('user_profiles')
            .select('count')
            .limit(0);

        if (error) {
            console.error('‚ùå Erro de conex√£o:', error.message);
            
            if (error.message.includes('table "user_profiles" does not exist')) {
                console.log('\nüîß SOLU√á√ÉO:');
                console.log('   O schema n√£o foi executado no Supabase!');
                console.log('   1. Acesse: https://supabase.com/dashboard');
                console.log('   2. V√° em SQL Editor');
                console.log('   3. Execute o arquivo: supabase/schema.sql');
                console.log('');
            }
            
            return false;
        }

        console.log('‚úÖ Conex√£o com Supabase funcionando!');
        return true;

    } catch (err) {
        console.error('‚ùå Erro inesperado:', err.message);
        return false;
    }
}

// 3Ô∏è‚É£ TESTE DE TABELAS
async function testTables() {
    console.log('3Ô∏è‚É£ Verificando tabelas do banco...');
    
    const tables = ['user_profiles', 'tasks', 'events', 'activities'];
    
    for (const table of tables) {
        try {
            const { error } = await supabase
                .from(table)
                .select('count')
                .limit(0);
                
            if (error) {
                console.log(`‚ùå Tabela ${table}: ${error.message}`);
            } else {
                console.log(`‚úÖ Tabela ${table}: OK`);
            }
        } catch (err) {
            console.log(`‚ùå Tabela ${table}: ${err.message}`);
        }
    }
}

// Executar testes
async function runTests() {
    const connectionOk = await testConnection();
    
    if (connectionOk) {
        await testTables();
        
        console.log('\nüéâ RESUMO:');
        console.log('‚úÖ Conex√£o: Funcionando');
        console.log('‚úÖ Configura√ß√£o: OK');
        console.log('\nüìã PR√ìXIMOS PASSOS:');
        console.log('   1. Se alguma tabela falhou, execute o schema SQL');
        console.log('   2. Teste o endpoint: curl http://localhost:3000/api/health');
        console.log('   3. Crie um usu√°rio de teste no Supabase Auth');
        
    } else {
        console.log('\nüîß VERIFIQUE:');
        console.log('   1. SUPABASE_URL est√° correto?');
        console.log('   2. SUPABASE_ANON_KEY est√° correto?');
        console.log('   3. Schema foi executado no Supabase?');
    }
}

runTests().catch(console.error);