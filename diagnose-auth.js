#!/usr/bin/env node
/**
 * üîß DIAGN√ìSTICO SUPABASE AUTH
 * Identifica e resolve problemas de cria√ß√£o de usu√°rios
 */

import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config({ path: '.env.local' });

console.log('üîß Diagn√≥stico Supabase Auth\n');

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function diagnoseAuth() {
  try {
    console.log('1Ô∏è‚É£ Verificando configura√ß√µes de Auth...');
    
    // Teste 1: Tentar obter configura√ß√µes p√∫blicas de auth
    try {
      const { data, error } = await supabase.auth.getSession();
      console.log('   ‚úÖ Auth client inicializado');
    } catch (error) {
      console.log(`   ‚ùå Erro no auth client: ${error.message}`);
    }
    
    // Teste 2: Verificar se signup est√° habilitado
    console.log('\n2Ô∏è‚É£ Testando signup b√°sico...');
    
    const testEmail = `teste-${Date.now()}@catbutler.com`;
    const testPassword = '123456789';
    
    console.log(`   Email de teste: ${testEmail}`);
    console.log('   Tentando signup...');
    
    const { data, error } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword
    });
    
    if (error) {
      console.log(`   ‚ùå Signup falhou: ${error.message}`);
      
      // Analisar tipos de erro comuns
      if (error.message.includes('Signup is disabled')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Signup desabilitado');
        console.log('   SOLU√á√ÉO:');
        console.log('   1. Acesse: https://supabase.com/dashboard/project/htmcbeidfvjjmwsuahdq/auth/settings');
        console.log('   2. Na se√ß√£o "User signup"');
        console.log('   3. Ative "Enable email signup"');
        console.log('   4. Desative "Enable email confirmations" (temporariamente para teste)');
        
      } else if (error.message.includes('Database error')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Erro de banco de dados');
        console.log('   POSS√çVEIS CAUSAS:');
        console.log('   1. Schema auth n√£o foi aplicado corretamente');
        console.log('   2. Permiss√µes de RLS muito restritivas');
        console.log('   3. Triggers faltando');
        
        console.log('\n   SOLU√á√ÉO:');
        console.log('   1. Acesse: https://supabase.com/dashboard/project/htmcbeidfvjjmwsuahdq/sql/');
        console.log('   2. Execute este comando para resetar auth:');
        console.log('   ');
        console.log('   -- Reset auth b√°sico');
        console.log('   DELETE FROM auth.users WHERE email LIKE \'%@catbutler.com\';');
        
      } else if (error.message.includes('Invalid email')) {
        console.log('\nüö® PROBLEMA IDENTIFICADO: Email inv√°lido');
        console.log('   Isso √© menos prov√°vel, mas verifique o formato');
        
      } else {
        console.log('\nüö® PROBLEMA DESCONHECIDO');
        console.log('   Error details:', JSON.stringify(error, null, 2));
      }
      
      return false;
      
    } else {
      console.log('   ‚úÖ Signup funcionando!');
      
      if (data.user && !data.session) {
        console.log('   üìß Usu√°rio criado mas precisa confirmar email');
        console.log(`   User ID: ${data.user.id}`);
        console.log('   Email confirmation necess√°ria');
        
      } else if (data.session) {
        console.log('   ‚úÖ Usu√°rio criado e logado automaticamente!');
        console.log(`   User ID: ${data.user.id}`);
        console.log(`   Session: ${data.session.access_token.substring(0, 50)}...`);
        
        // Testar se consegue acessar o perfil
        const { data: profile, error: profileError } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('id', data.user.id)
          .single();
          
        if (profileError && profileError.code !== 'PGRST116') {
          console.log(`   ‚ö†Ô∏è Problema ao acessar perfil: ${profileError.message}`);
        } else if (!profile) {
          console.log('   üìù Perfil ainda n√£o existe (ser√° criado pelo backend)');
        } else {
          console.log('   ‚úÖ Perfil acess√≠vel');
        }
      }
      
      return true;
    }
    
  } catch (error) {
    console.error('üö® Erro geral:', error);
    return false;
  }
}

// Fun√ß√£o para testar signup manual (via dashboard)
async function testManualUser() {
  console.log('\n3Ô∏è‚É£ Testando usu√°rio criado manualmente...');
  
  // Credenciais que devem ser criadas no dashboard
  const manualEmail = 'admin@catbutler.com';
  const manualPassword = 'catbutler123';
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: manualEmail,
      password: manualPassword
    });
    
    if (error) {
      if (error.message.includes('Invalid login credentials')) {
        console.log('   ‚ÑπÔ∏è Usu√°rio manual n√£o existe ainda');
        console.log('   Vamos tentar criar via dashboard...');
        return false;
      } else {
        console.log(`   ‚ùå Erro no login manual: ${error.message}`);
        return false;
      }
    }
    
    console.log('   ‚úÖ Usu√°rio manual funcionando!');
    console.log(`   Email: ${data.user.email}`);
    console.log(`   ID: ${data.user.id}`);
    return true;
    
  } catch (error) {
    console.log(`   ‚ùå Erro inesperado: ${error.message}`);
    return false;
  }
}

// Executar diagn√≥stico completo
async function runDiagnosis() {
  console.log('üîç Iniciando diagn√≥stico completo...\n');
  
  const signupWorking = await diagnoseAuth();
  const manualWorking = await testManualUser();
  
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
  console.log(`   Signup autom√°tico: ${signupWorking ? '‚úÖ Funcionando' : '‚ùå Com problemas'}`);
  console.log(`   Usu√°rio manual: ${manualWorking ? '‚úÖ Funcionando' : '‚ùå N√£o existe'}`);
  
  if (!signupWorking && !manualWorking) {
    console.log('\nüö® A√á√ÉO NECESS√ÅRIA:');
    console.log('   1. Verificar configura√ß√µes de Auth no Supabase');
    console.log('   2. Habilitar signup de email');
    console.log('   3. Criar usu√°rio manual como backup');
    console.log('');
    console.log('   URLs √∫teis:');
    console.log('   üìä Dashboard: https://supabase.com/dashboard/project/htmcbeidfvjjmwsuahdq');
    console.log('   ‚öôÔ∏è Auth Settings: https://supabase.com/dashboard/project/htmcbeidfvjjmwsuahdq/auth/settings');
    console.log('   üë• Users: https://supabase.com/dashboard/project/htmcbeidfvjjmwsuahdq/auth/users');
    
  } else if (signupWorking) {
    console.log('\n‚úÖ SIGNUP FUNCIONANDO!');
    console.log('   Voc√™ pode criar usu√°rios automaticamente');
    console.log('   Frontend e signup est√£o prontos para usar');
    
  } else if (manualWorking) {
    console.log('\n‚úÖ USU√ÅRIO MANUAL FUNCIONANDO!');
    console.log('   Voc√™ pode usar o usu√°rio manual para testes');
    console.log('   Mas signup autom√°tico precisa ser corrigido');
  }
}

runDiagnosis().catch(console.error);